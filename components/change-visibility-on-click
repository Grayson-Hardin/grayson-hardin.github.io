AFRAME.registerComponent('change-visibility-on-click', {
  schema: {
    visible: { default: false }
  },

  init: function () {
    var getUserCoords = document.querySelector('[get-user-coords]').components["get-user-coords"];
    getUserCoords.qux()

    var el = this.el;
    var hover = true;
    var defaultVisibility = el.getAttribute('visible').visible;


    // Distance of User & Model 
    var userCords = `latitude: ${getUserCoords.userPosition.latitude}; longitude:  ${getUserCoords.userPosition.longitude};`;
    var modelCoords = el.getAttribute('gps-projected-entity-place')

    var formatUserCoords = userCords.split(';');
    var userLatitude = formatUserCoords[0].replace(/^\.|[^-?\d\.]|\.(?=.*\.)|^0+(?=\d)/g, '')
    var userLongitude = formatUserCoords[1].replace(/^\.|[^-?\d\.]|\.(?=.*\.)|^0+(?=\d)/g, '')

    var formatModelCoords = modelCoords.split(';')
    var modelLatitude = formatModelCoords[0].replace(/^\.|[^-?\d\.]|\.(?=.*\.)|^0+(?=\d)/g, '')
    var modelLongitude = formatModelCoords[1].replace(/^\.|[^-?\d\.]|\.(?=.*\.)|^0+(?=\d)/g, '')


    // function to convert lat / lon to meters
    function measure(lat1, lon1, lat2, lon2) {
      var R = 6378.137; // Radius of earth in KM
      var dLat = lat2 * Math.PI / 180 - lat1 * Math.PI / 180;
      var dLon = lon2 * Math.PI / 180 - lon1 * Math.PI / 180;
      var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2);
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c;
      return d * 1000; // meters
    }

    distanceFromObject = measure(userLatitude, userLongitude, modelLatitude, modelLongitude)

    // Check whether user is within range
    if (distanceFromObject < 30) {
      el.setAttribute('visible', true)
      console.log(el.getAttribute('visible'))
      console.log("You are within " + distanceFromObject + " meters of a bug!")

    }
    else if (distanceFromObject > 30 && distanceFromObject < 100) {
      console.log("You are getting closer!")
    }
    else {
      console.log("You are far away, keep looking!")
    }


    el.addEventListener('click', async function () {
      console.log("Clicked!")

      // Shrink animation
      let scale = el.getAttribute('scale');
      console.log(el.getAttribute('gltf-model'))
      console.log(el.getAttribute('position'))

      while (scale.x > 0.10 && el.getAttribute('gltf-model') === 'assets/models/lady_bug/scene.gltf') {
        console.log(scale);
        scale.x = scale.x - .01;
        scale.y = scale.y - .01;
        scale.z = scale.z - .01;
        await new Promise(r => setTimeout(r, 50));
      }

      // Change model
      hover = false;
      el.setAttribute('visible', defaultVisibility)
      el.removeAttribute('gltf-model')
      el.setAttribute('gltf-model', "#squashed_lady_bug")
      el.setAttribute('scale', '.5 .5 .5')
    });
  }
});